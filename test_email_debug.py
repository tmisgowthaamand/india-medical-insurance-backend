#!/usr/bin/env python3
"""
Comprehensive Email Debugging Script for MediCare+ Platform
Tests Gmail SMTP configuration and email sending functionality
"""

import os
import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import sys
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

def test_environment_variables():
    """Test if Gmail environment variables are properly set"""
    print("🔍 TESTING ENVIRONMENT VARIABLES")
    print("=" * 50)
    
    gmail_email = os.getenv("GMAIL_EMAIL")
    gmail_password = os.getenv("GMAIL_APP_PASSWORD")
    
    print(f"GMAIL_EMAIL: {'✅ Set' if gmail_email else '❌ Not set'}")
    if gmail_email:
        print(f"   Value: {gmail_email}")
    
    print(f"GMAIL_APP_PASSWORD: {'✅ Set' if gmail_password else '❌ Not set'}")
    if gmail_password:
        print(f"   Length: {len(gmail_password)} characters")
        print(f"   First 4 chars: {gmail_password[:4]}...")
    
    return gmail_email, gmail_password

def test_smtp_connection(gmail_email, gmail_password):
    """Test SMTP connection to Gmail"""
    print("\n🔗 TESTING SMTP CONNECTION")
    print("=" * 50)
    
    if not gmail_email or not gmail_password:
        print("❌ Cannot test SMTP - credentials not available")
        return False
    
    try:
        print("📡 Connecting to smtp.gmail.com:587...")
        context = ssl.create_default_context()
        
        with smtplib.SMTP("smtp.gmail.com", 587) as server:
            print("✅ Connected to SMTP server")
            
            print("🔐 Starting TLS...")
            server.starttls(context=context)
            print("✅ TLS started successfully")
            
            print("🔑 Attempting login...")
            server.login(gmail_email, gmail_password)
            print("✅ Login successful!")
            
        return True
        
    except smtplib.SMTPAuthenticationError as e:
        print(f"❌ Authentication failed: {e}")
        print("💡 Possible issues:")
        print("   - Incorrect Gmail App Password")
        print("   - 2-Factor Authentication not enabled")
        print("   - App Password not generated correctly")
        return False
    except smtplib.SMTPConnectError as e:
        print(f"❌ Connection failed: {e}")
        print("💡 Check internet connection and firewall settings")
        return False
    except Exception as e:
        print(f"❌ SMTP test failed: {e}")
        return False

def send_test_email(gmail_email, gmail_password, recipient_email):
    """Send a test email"""
    print(f"\n📧 SENDING TEST EMAIL TO {recipient_email}")
    print("=" * 50)
    
    if not gmail_email or not gmail_password:
        print("❌ Cannot send email - credentials not available")
        return False
    
    try:
        # Create test email
        msg = MIMEMultipart('alternative')
        msg['Subject'] = f"🧪 MediCare+ Email Test - {datetime.now().strftime('%H:%M:%S')}"
        msg['From'] = gmail_email
        msg['To'] = recipient_email
        
        # Create HTML content
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>MediCare+ Email Test</title>
        </head>
        <body style="font-family: Arial, sans-serif; padding: 20px; background-color: #f4f4f4;">
            <div style="max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px;">
                <h1 style="color: #667eea; text-align: center;">🧪 MediCare+ Email Test</h1>
                <p>This is a test email from the MediCare+ platform.</p>
                <div style="background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0;">
                    <h3>📊 Test Details:</h3>
                    <ul>
                        <li><strong>Sent from:</strong> {gmail_email}</li>
                        <li><strong>Sent to:</strong> {recipient_email}</li>
                        <li><strong>Timestamp:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S IST')}</li>
                        <li><strong>SMTP Server:</strong> smtp.gmail.com:587</li>
                    </ul>
                </div>
                <p style="color: #28a745;"><strong>✅ If you received this email, the Gmail SMTP configuration is working correctly!</strong></p>
                <hr style="margin: 20px 0;">
                <p style="text-align: center; color: #666; font-size: 12px;">
                    Generated by MediCare+ Email Debug System<br>
                    © 2024 MediCare+ Platform
                </p>
            </div>
        </body>
        </html>
        """
        
        # Attach HTML content
        html_part = MIMEText(html_content, 'html')
        msg.attach(html_part)
        
        # Send email
        print("🔗 Connecting to Gmail SMTP...")
        context = ssl.create_default_context()
        with smtplib.SMTP("smtp.gmail.com", 587) as server:
            print("🔐 Starting TLS...")
            server.starttls(context=context)
            print("🔑 Logging in...")
            server.login(gmail_email, gmail_password)
            print("📧 Sending test email...")
            server.send_message(msg)
        
        print(f"✅ Test email sent successfully to {recipient_email}")
        print(f"📬 Subject: {msg['Subject']}")
        print(f"⏰ Sent at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S IST')}")
        print("\n📱 CHECK YOUR EMAIL:")
        print(f"   1. Check inbox for: {recipient_email}")
        print("   2. Check spam/junk folder")
        print("   3. Check promotions tab (Gmail)")
        print("   4. Wait 1-2 minutes for delivery")
        
        return True
        
    except Exception as e:
        print(f"❌ Failed to send test email: {e}")
        return False

def test_email_service_import():
    """Test if email service can be imported"""
    print("\n📦 TESTING EMAIL SERVICE IMPORT")
    print("=" * 50)
    
    try:
        from email_service import email_service
        print("✅ Email service imported successfully")
        
        print(f"Email enabled: {email_service.is_email_enabled()}")
        print(f"SMTP server: {email_service.smtp_server}")
        print(f"SMTP port: {email_service.smtp_port}")
        print(f"Sender email: {email_service.sender_email}")
        
        return email_service
    except Exception as e:
        print(f"❌ Failed to import email service: {e}")
        return None

def main():
    """Main testing function"""
    print("🧪 MEDICARE+ EMAIL DEBUGGING SYSTEM")
    print("=" * 60)
    print(f"Started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S IST')}")
    print("=" * 60)
    
    # Test 1: Environment Variables
    gmail_email, gmail_password = test_environment_variables()
    
    # Test 2: Email Service Import
    email_service = test_email_service_import()
    
    # Test 3: SMTP Connection
    smtp_success = test_smtp_connection(gmail_email, gmail_password)
    
    # Test 4: Send Test Email
    if smtp_success and gmail_email:
        recipient = input(f"\n📧 Enter recipient email to test (or press Enter to use {gmail_email}): ").strip()
        if not recipient:
            recipient = gmail_email
        
        send_test_email(gmail_email, gmail_password, recipient)
    
    # Summary
    print("\n📋 DEBUGGING SUMMARY")
    print("=" * 50)
    print(f"Environment Variables: {'✅ OK' if gmail_email and gmail_password else '❌ MISSING'}")
    print(f"Email Service Import: {'✅ OK' if email_service else '❌ FAILED'}")
    print(f"SMTP Connection: {'✅ OK' if smtp_success else '❌ FAILED'}")
    
    if not smtp_success:
        print("\n🔧 TROUBLESHOOTING STEPS:")
        print("1. Verify Gmail App Password is correct")
        print("2. Ensure 2-Factor Authentication is enabled on Gmail")
        print("3. Generate new App Password at: https://myaccount.google.com/apppasswords")
        print("4. Check if 'Less secure app access' is disabled (should be)")
        print("5. Verify internet connection and firewall settings")
        print("6. Try sending from a different network")
    
    print(f"\nCompleted at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S IST')}")

if __name__ == "__main__":
    main()
