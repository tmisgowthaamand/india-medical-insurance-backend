#!/usr/bin/env python3
"""
Deployment Email Setup Guide - MediCare+ Platform
Setup email delivery for Localhost, Render, and Vercel
"""

def show_deployment_email_setup():
    """Show email setup for all deployment platforms"""
    print("🚀 DEPLOYMENT EMAIL SETUP - MediCare+ Platform")
    print("="*80)
    print()
    print("🎯 GOAL: Fix email delivery on all platforms")
    print("❌ CURRENT: Fake success messages, no actual Gmail delivery")
    print("✅ SOLUTION: Configure real email providers")
    print()
    
    print("="*80)
    print("💻 LOCALHOST SETUP")
    print("="*80)
    print()
    print("📋 Step 1: Create .env file in backend folder")
    print("-" * 50)
    print("Create file: backend/.env")
    print("Add this content:")
    print()
    print("# SendGrid Configuration (Recommended)")
    print("SENDGRID_API_KEY=SG.your_sendgrid_api_key_here")
    print()
    print("# OR Mailgun Configuration")
    print("MAILGUN_API_KEY=your_mailgun_api_key")
    print("MAILGUN_DOMAIN=sandbox-xxx.mailgun.org")
    print()
    print("# Sender Email")
    print("SENDER_EMAIL=gokrishna98@gmail.com")
    print()
    
    print("📋 Step 2: Install dependencies")
    print("-" * 50)
    print("cd backend")
    print("pip install -r requirements.txt")
    print()
    
    print("📋 Step 3: Test email")
    print("-" * 50)
    print("python test_sendgrid_simple.py")
    print()
    
    print("="*80)
    print("☁️ RENDER DEPLOYMENT SETUP")
    print("="*80)
    print()
    print("📋 Step 1: Get SendGrid API Key")
    print("-" * 50)
    print("1. Go to https://sendgrid.com")
    print("2. Sign up for free account")
    print("3. Go to Settings → API Keys")
    print("4. Create new API key with Mail Send permissions")
    print("5. Copy the API key (starts with SG.)")
    print()
    
    print("📋 Step 2: Configure Render Environment")
    print("-" * 50)
    print("1. Go to Render dashboard")
    print("2. Select your MediCare+ backend service")
    print("3. Click 'Environment' tab")
    print("4. Add environment variables:")
    print()
    print("   SENDGRID_API_KEY = SG.your_actual_api_key_here")
    print("   SENDER_EMAIL = gokrishna98@gmail.com")
    print()
    print("5. Click 'Save Changes'")
    print("6. Wait for automatic redeploy (2-3 minutes)")
    print()
    
    print("📋 Step 3: Verify Render Deployment")
    print("-" * 50)
    print("1. Check Render service logs")
    print("2. Look for: 'Available Providers: [SendGrid]'")
    print("3. Test email from frontend")
    print("4. Should see: 'Email sent via SendGrid'")
    print()
    
    print("="*80)
    print("⚡ VERCEL DEPLOYMENT SETUP")
    print("="*80)
    print()
    print("📋 Step 1: Vercel Environment Variables")
    print("-" * 50)
    print("1. Go to Vercel dashboard")
    print("2. Select your MediCare+ project")
    print("3. Go to Settings → Environment Variables")
    print("4. Add these variables:")
    print()
    print("   SENDGRID_API_KEY = SG.your_actual_api_key_here")
    print("   SENDER_EMAIL = gokrishna98@gmail.com")
    print()
    print("5. Redeploy your project")
    print()
    
    print("📋 Step 2: Vercel Serverless Functions")
    print("-" * 50)
    print("Note: If using Vercel for backend, you'll need to:")
    print("1. Convert FastAPI endpoints to Vercel serverless functions")
    print("2. Or use Vercel with external backend (Render)")
    print("3. Recommended: Keep backend on Render, frontend on Vercel")
    print()
    
    print("="*80)
    print("🔧 TROUBLESHOOTING BY PLATFORM")
    print("="*80)
    print()
    
    print("💻 LOCALHOST ISSUES:")
    print("-" * 30)
    print("❌ 'stored locally' message:")
    print("   → Check .env file exists in backend folder")
    print("   → Verify SENDGRID_API_KEY is set correctly")
    print("   → Restart backend server after adding .env")
    print()
    print("❌ 'requests module not found':")
    print("   → Run: pip install -r requirements.txt")
    print("   → Check virtual environment is activated")
    print()
    
    print("☁️ RENDER ISSUES:")
    print("-" * 30)
    print("❌ 'stored locally' message:")
    print("   → Check environment variables in Render dashboard")
    print("   → Verify SENDGRID_API_KEY starts with 'SG.'")
    print("   → Check service logs for errors")
    print()
    print("❌ Service not responding:")
    print("   → Check service is running in Render dashboard")
    print("   → Verify build completed successfully")
    print("   → Check service logs for startup errors")
    print()
    
    print("⚡ VERCEL ISSUES:")
    print("-" * 30)
    print("❌ Environment variables not working:")
    print("   → Redeploy after adding environment variables")
    print("   → Check variable names match exactly")
    print("   → Verify serverless function configuration")
    print()
    
    print("="*80)
    print("✅ SUCCESS VERIFICATION")
    print("="*80)
    print()
    print("When email is working correctly on each platform:")
    print()
    print("💻 LOCALHOST:")
    print("   Frontend: '✅ Email delivered successfully via SendGrid'")
    print("   Console: 'Available Providers: [SendGrid]'")
    print("   Gmail: Receives MediCare+ report within 5 minutes")
    print()
    print("☁️ RENDER:")
    print("   Frontend: '✅ Email delivered successfully via SendGrid'")
    print("   Logs: 'Email sent via SendGrid in X.Xs'")
    print("   Gmail: Receives MediCare+ report within 5 minutes")
    print()
    print("⚡ VERCEL:")
    print("   Frontend: '✅ Email delivered successfully via SendGrid'")
    print("   Function logs: 'SendGrid email sent successfully'")
    print("   Gmail: Receives MediCare+ report within 5 minutes")
    print()
    
    print("="*80)
    print("🎯 QUICK TEST COMMANDS")
    print("="*80)
    print()
    print("Test localhost:")
    print("cd backend && python test_sendgrid_simple.py")
    print()
    print("Test Render:")
    print("curl https://your-render-url.onrender.com/test-email")
    print()
    print("Test Vercel:")
    print("curl https://your-vercel-url.vercel.app/api/test-email")
    print()
    
    print("="*80)
    print("📧 EXPECTED EMAIL BEHAVIOR")
    print("="*80)
    print()
    print("BEFORE FIX (Current):")
    print("❌ Frontend: 'Email delivered successfully' (fake)")
    print("❌ Gmail: No email received")
    print("❌ Backend: 'stored locally' (not sent)")
    print()
    print("AFTER FIX (Target):")
    print("✅ Frontend: 'Email delivered successfully via SendGrid'")
    print("✅ Gmail: Professional MediCare+ report received")
    print("✅ Backend: 'Email sent via SendGrid in 2.3s'")
    print()
    
    print("🚀 TOTAL SETUP TIME: ~10 minutes per platform")
    print("💰 COST: FREE (SendGrid: 100 emails/day)")
    print("✅ RELIABILITY: 99.9% delivery rate")

def show_current_platform_status():
    """Show current status for each platform"""
    print("\n" + "="*80)
    print("📊 CURRENT PLATFORM STATUS")
    print("="*80)
    
    import os
    
    # Check environment variables
    sendgrid_key = os.getenv("SENDGRID_API_KEY")
    sender_email = os.getenv("SENDER_EMAIL")
    
    print(f"💻 LOCALHOST:")
    print(f"   SendGrid API Key: {'✅ SET' if sendgrid_key else '❌ NOT SET'}")
    print(f"   Sender Email: {'✅ SET' if sender_email else '❌ NOT SET'}")
    
    if sendgrid_key:
        print(f"   Key format: {'✅ VALID' if sendgrid_key.startswith('SG.') else '❌ INVALID'}")
    
    print(f"\n☁️ RENDER:")
    print("   Check Render dashboard → Environment variables")
    print("   Required: SENDGRID_API_KEY, SENDER_EMAIL")
    
    print(f"\n⚡ VERCEL:")
    print("   Check Vercel dashboard → Settings → Environment Variables")
    print("   Required: SENDGRID_API_KEY, SENDER_EMAIL")
    
    if not sendgrid_key:
        print(f"\n❌ EMAIL DELIVERY: NOT WORKING")
        print("🔧 Configure SendGrid API key to enable email delivery")
        print("📋 Emails are being stored locally only")
    else:
        print(f"\n✅ EMAIL DELIVERY: CONFIGURED")
        print("🎉 Emails should be delivered to Gmail inbox")

if __name__ == "__main__":
    show_deployment_email_setup()
    show_current_platform_status()
