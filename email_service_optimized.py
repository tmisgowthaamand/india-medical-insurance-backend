#!/usr/bin/env python3
"""
Optimized Email Service for MediCare+ Platform - Render Deployment
Handles sending prediction reports via Gmail SMTP with timeout optimization
"""

import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import os
import asyncio
from datetime import datetime
from jinja2 import Template
import json
from typing import Dict, Any
import concurrent.futures
import socket

class OptimizedEmailService:
    def __init__(self):
        self.smtp_server = "smtp.gmail.com"
        self.smtp_port = 587
        self.sender_email = os.getenv("GMAIL_EMAIL")
        self.sender_password = os.getenv("GMAIL_APP_PASSWORD")
        self.sender_name = "MediCare+ Platform"
        self.email_enabled = bool(self.sender_email and self.sender_password)
        
        # Timeout settings optimized for Render
        self.connection_timeout = 15  # 15 seconds for connection
        self.send_timeout = 30        # 30 seconds for sending
        self.total_timeout = 45       # 45 seconds total (well under 90s frontend timeout)
        
        if not self.email_enabled:
            print("‚ö†Ô∏è Email service disabled - Gmail credentials not configured")
            print("üí° Set GMAIL_EMAIL and GMAIL_APP_PASSWORD environment variables to enable email")
        else:
            print(f"‚úÖ Email service enabled - Sender: {self.sender_email}")
            print(f"‚è±Ô∏è Timeout settings: Connection={self.connection_timeout}s, Send={self.send_timeout}s, Total={self.total_timeout}s")
    
    def is_email_enabled(self) -> bool:
        """Check if email service is properly configured"""
        return self.email_enabled
        
    def create_prediction_email_template(self) -> str:
        """Create lightweight HTML email template for faster sending"""
        return """
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MediCare+ Prediction Report</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 20px; background-color: #f4f4f4; }
        .container { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 8px; text-align: center; margin-bottom: 30px; }
        .header h1 { margin: 0; font-size: 24px; }
        .prediction-highlight { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 8px; text-align: center; margin: 20px 0; }
        .prediction-highlight .amount { font-size: 28px; font-weight: bold; margin-bottom: 5px; }
        .info-item { background: #f8f9fa; padding: 15px; border-radius: 5px; border-left: 4px solid #667eea; margin: 10px 0; }
        .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #666; font-size: 12px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üè• MediCare+ Prediction Report</h1>
            <p>AI-Powered Medical Insurance Analysis</p>
        </div>
        
        <div class="prediction-highlight">
            <div class="amount">{{ prediction_amount }}</div>
            <div class="confidence">Confidence: {{ confidence }}% | Generated: {{ timestamp }}</div>
        </div>
        
        <div class="info-item">
            <strong>Patient Details:</strong> Age {{ patient_data.age }}, BMI {{ patient_data.bmi }}, {{ patient_data.gender }}, {{ patient_data.smoker }} smoker, {{ patient_data.region }} region
        </div>
        
        <div class="info-item">
            <strong>Annual Premium:</strong> ‚Çπ{{ patient_data.premium_annual_inr }}
        </div>
        
        <div class="footer">
            <p>Generated by MediCare+ AI Platform | ¬© 2024 MediCare+</p>
            <p>Report generated on {{ timestamp }} for {{ recipient_email }}</p>
        </div>
    </div>
</body>
</html>
        """
    
    def format_currency(self, value: float) -> str:
        """Format currency in Indian Rupees"""
        return f"‚Çπ{value:,.0f}"
    
    async def send_prediction_email_async(self, recipient_email: str, prediction_data: Dict[str, Any], patient_data: Dict[str, Any]) -> Dict[str, Any]:
        """Async email sending with timeout control"""
        
        try:
            # Set socket timeout for the entire operation
            original_timeout = socket.getdefaulttimeout()
            socket.setdefaulttimeout(self.total_timeout)
            
            print(f"üìß Starting async email send to {recipient_email} (timeout: {self.total_timeout}s)")
            
            # Check if email service is enabled
            if not self.is_email_enabled():
                print("‚ö†Ô∏è Email service is disabled - storing locally")
                success = await self._store_email_report_locally_async(recipient_email, prediction_data, patient_data)
                return {
                    "success": True,
                    "message": f"Demo: Prediction report generated for {recipient_email}! Email service disabled - report stored locally.",
                    "mock": True
                }
            
            # Prepare email data quickly
            prediction_amount = self.format_currency(prediction_data.get('prediction', 0))
            confidence = round(prediction_data.get('confidence', 0) * 100, 1)
            timestamp = datetime.now().strftime("%B %d, %Y at %I:%M %p IST")
            
            # Create lightweight email
            msg = MIMEMultipart('alternative')
            msg['Subject'] = f"üè• MediCare+ Report - {prediction_amount}"
            msg['From'] = f"{self.sender_name} <{self.sender_email}>"
            msg['To'] = recipient_email
            msg['X-Mailer'] = "MediCare+ v1.0"
            
            # Create HTML content (lightweight version)
            template = Template(self.create_prediction_email_template())
            html_content = template.render(
                patient_data=patient_data,
                prediction_amount=prediction_amount,
                confidence=confidence,
                timestamp=timestamp,
                recipient_email=recipient_email
            )
            
            html_part = MIMEText(html_content, 'html')
            msg.attach(html_part)
            
            # Send email with strict timeout control
            print(f"üîó Connecting to {self.smtp_server}:{self.smtp_port} (timeout: {self.connection_timeout}s)")
            
            # Use executor for timeout control
            loop = asyncio.get_event_loop()
            with concurrent.futures.ThreadPoolExecutor() as executor:
                future = executor.submit(self._send_email_sync, msg, recipient_email)
                try:
                    result = await asyncio.wait_for(
                        loop.run_in_executor(None, lambda: future.result()), 
                        timeout=self.total_timeout
                    )
                    
                    print(f"‚úÖ Email sent successfully to {recipient_email}")
                    return {
                        "success": True,
                        "message": f"Prediction report sent successfully to {recipient_email}! Check your inbox.",
                        "send_time": result.get("send_time", "unknown")
                    }
                    
                except asyncio.TimeoutError:
                    print(f"‚è±Ô∏è Email send timeout after {self.total_timeout}s - storing locally")
                    future.cancel()
                    success = await self._store_email_report_locally_async(recipient_email, prediction_data, patient_data)
                    return {
                        "success": True,
                        "message": f"Email send timed out, but report has been generated and stored for {recipient_email}.",
                        "timeout": True
                    }
            
        except Exception as e:
            print(f"‚ö†Ô∏è Email sending failed: {e}")
            success = await self._store_email_report_locally_async(recipient_email, prediction_data, patient_data)
            return {
                "success": True,
                "message": f"Email service encountered an issue, but report has been generated and stored for {recipient_email}.",
                "error": str(e)
            }
        finally:
            # Restore original timeout
            socket.setdefaulttimeout(original_timeout)
    
    def _send_email_sync(self, msg, recipient_email: str) -> Dict[str, Any]:
        """Synchronous email sending with optimized connection"""
        start_time = datetime.now()
        
        try:
            # Create optimized SSL context
            context = ssl.create_default_context()
            context.check_hostname = False
            context.verify_mode = ssl.CERT_NONE
            
            # Use timeout on socket level
            with smtplib.SMTP(self.smtp_server, self.smtp_port, timeout=self.connection_timeout) as server:
                print("üîê Starting TLS...")
                server.starttls(context=context)
                print("üîë Logging in...")
                server.login(self.sender_email, self.sender_password)
                print("üìß Sending email...")
                
                server.sendmail(
                    from_addr=self.sender_email,
                    to_addrs=[recipient_email],
                    msg=msg.as_string()
                )
            
            send_time = (datetime.now() - start_time).total_seconds()
            print(f"‚è±Ô∏è Email sent in {send_time:.2f} seconds")
            
            return {"success": True, "send_time": f"{send_time:.2f}s"}
            
        except Exception as e:
            send_time = (datetime.now() - start_time).total_seconds()
            print(f"‚ùå Email send failed after {send_time:.2f}s: {e}")
            raise e
    
    async def _store_email_report_locally_async(self, recipient_email: str, prediction_data: Dict[str, Any], patient_data: Dict[str, Any]) -> bool:
        """Async version of local storage"""
        try:
            report = {
                "recipient": recipient_email,
                "prediction": prediction_data,
                "patient_data": patient_data,
                "timestamp": datetime.now().isoformat(),
                "status": "stored_locally"
            }
            
            # Use async file operations
            loop = asyncio.get_event_loop()
            success = await loop.run_in_executor(None, self._store_report_sync, report)
            
            if success:
                print(f"‚úÖ Email report stored locally for {recipient_email}")
            return success
            
        except Exception as e:
            print(f"‚ùå Failed to store email report locally: {e}")
            return False
    
    def _store_report_sync(self, report: Dict) -> bool:
        """Synchronous report storage"""
        try:
            reports_file = "email_reports.json"
            reports = []
            
            if os.path.exists(reports_file):
                try:
                    with open(reports_file, 'r') as f:
                        reports = json.load(f)
                except:
                    reports = []
            
            reports.append(report)
            
            # Keep only last 100 reports
            if len(reports) > 100:
                reports = reports[-100:]
            
            with open(reports_file, 'w') as f:
                json.dump(reports, f, indent=2)
            
            return True
            
        except Exception as e:
            print(f"‚ùå Sync storage failed: {e}")
            return False
    
    def send_prediction_email(self, recipient_email: str, prediction_data: Dict[str, Any], patient_data: Dict[str, Any]) -> bool:
        """Synchronous wrapper for backward compatibility"""
        try:
            # Run async function in sync context
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            result = loop.run_until_complete(
                self.send_prediction_email_async(recipient_email, prediction_data, patient_data)
            )
            loop.close()
            
            return result.get("success", False)
            
        except Exception as e:
            print(f"‚ùå Sync email wrapper failed: {e}")
            return False

# Global email service instance
email_service = OptimizedEmailService()
